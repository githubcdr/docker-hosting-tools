name: release
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run build without pushing to registries'
        required: false
        type: boolean
        default: false

# Ensures that only one workflow run is triggered for the same event and ref.
# If a new run is triggered, it will cancel any in-progress runs for the same group.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    # Add 'actions: write' permission for the GHA cache backend.
    # 'packages: write' is for pushing to GHCR.
    permissions:
      contents: read
      packages: write
      actions: write # Required for cache-to=type:gha
      security-events: write # For vulnerability scanning
      attestations: write # For build attestations
    runs-on: ubuntu-24.04
    timeout-minutes: 60 # Prevent runaway jobs
    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/hosting-tools
            docker.io/cdrocker/hosting-tools
            git.codar.nl/codarhq/hosting-tools
          tags: |
            # Generate tags for branch events (e.g., main, develop)
            type=ref,event=branch
            # Generate semver tags from Git tags (e.g., v1.2.3, v1.2, v1)
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            # Also generate semver tags without the 'v' prefix
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Tag as 'stable' only on a published release event
            type=raw,value=stable,enable=${{ github.event_name == 'release' }}
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=hosting-tools
            org.opencontainers.image.description=A collection of self-hosting and operational tools
            org.opencontainers.image.url=https://codar.nl
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Login to GHCR Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use built-in token instead of custom secret

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Codar Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.CODARREPO_USERNAME }}
          password: ${{ secrets.CODARREPO_TOKEN }}
          registry: ${{ secrets.CODARREPO_URL }}

      - name: Build and push container image
        id: docker_build
        uses: docker/build-push-action@5176d81f87c23d6fc96624dfdbcd9f3830bbe445 # v6.5.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          # Improved push condition for better clarity
          push: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enhanced caching with registry-based cache
          cache-from: |
            type=gha,scope=${{ github.workflow }}
            type=gha,scope=${{ github.workflow }},ref=refs/heads/main
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/hosting-tools:buildcache
          cache-to: |
            type=gha,scope=${{ github.workflow }},mode=max
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/hosting-tools:buildcache,mode=max
          # Add build attestations and SBOM
          attestations: true
          sbom: true
          provenance: true
          # Build summary for better visibility
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Multi-platform build

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true' }}
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/hosting-tools:${{ steps.meta.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@294a9d92911152fe08befb9ec03e240add280cb3 # v3.26.8
        if: always() && (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true')
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Push**: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true' }}" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup on failure
        if: failure()
        run: |
          docker system prune -f
          docker builder prune -f
