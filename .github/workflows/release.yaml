name: release
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run build without pushing to registries'
        required: false
        type: boolean
        default: false

# Ensures that only one workflow run is triggered for the same event and ref.
# If a new run is triggered, it will cancel any in-progress runs for the same group.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    permissions:
      contents: read
      packages: write
      actions: write
      security-events: write
      attestations: write
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    env:
      DO_PUSH: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/hosting-tools
            docker.io/cdrocker/hosting-tools
            git.codar.nl/codarhq/hosting-tools
          tags: |
            type=ref,event=branch
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=stable,enable=${{ github.event_name == 'release' }}
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=hosting-tools
            org.opencontainers.image.description=A collection of self-hosting and operational tools
            org.opencontainers.image.url=https://codar.nl
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ghcr.io
          username: ${{ github.actor }}          # <— use actor for GHCR
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ env.DO_PUSH == 'true' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Codar Registry (best-effort)
        if: ${{ env.DO_PUSH == 'true' }}
        continue-on-error: true                   # <— don’t sink the build
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          username: ${{ secrets.CODARREPO_USERNAME }}
          password: ${{ secrets.CODARREPO_TOKEN }}
          registry: ${{ secrets.CODARREPO_URL }}

      - name: Build (and maybe push)
        id: docker_build
        uses: docker/build-push-action@9e436ba9f2d7bcd1d038c8e55d039d37896ddc5d
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          push: ${{ env.DO_PUSH }}                # <— single source of truth
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/hosting-tools:buildcache
            type=gha,scope=${{ github.workflow }}-${{ github.ref_name }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/hosting-tools:buildcache,mode=max,compression=zstd
            type=gha,mode=max,scope=${{ github.workflow }}-${{ github.ref_name }},ignore-error=true
          sbom: true
          provenance: true
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Multi-platform build

      - name: Resolve tag-to-scan
        id: pick_tag
        run: |
          if [ -n "${{ steps.meta.outputs.version }}" ]; then
            echo "tag=ghcr.io/${{ github.repository_owner }}/hosting-tools:${{ steps.meta.outputs.version }}" >> "$GITHUB_OUTPUT"
          else
            # fall back to first computed tag
            first="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
            echo "tag=${first}" >> "$GITHUB_OUTPUT"
          fi
          echo "Using tag: $(cat $GITHUB_OUTPUT)"

      - name: Scan image with Grype
        id: grype_scan
        uses: anchore/scan-action@v7
        if: ${{ env.DO_PUSH == 'true' }}
        with:
          image: ${{ steps.pick_tag.outputs.tag }}
          output-format: sarif
          fail-build: false
          severity-cutoff: critical
          only-fixed: false
          cache-db: true

      - name: Upload Grype (SARIF) results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.DO_PUSH == 'true'
        with:
          sarif_file: ${{ steps.grype_scan.outputs.sarif }}

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Push**: ${{ env.DO_PUSH }}" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup on failure
        if: failure()
        run: |
          docker system prune -f
          docker builder prune -f
