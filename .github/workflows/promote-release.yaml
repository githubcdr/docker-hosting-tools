name: Promote Release

on:
  workflow_dispatch:
    inputs:
      base_version:
        description: 'Version to promote (e.g., v2025.92.0-beta.0 or v2025.92.0-rc.0)'
        required: true
        type: string
      promotion_type:
        description: 'Promotion type'
        required: true
        type: choice
        options:
          - beta-to-rc
          - rc-to-stable

jobs:
  promote-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@grandvisionhq'

      - name: Install semver
        run: npm install -g semver

      - name: Validate base version exists
        run: |
          echo "Validating base version..."
          if ! git rev-parse "${{ inputs.base_version }}" >/dev/null 2>&1; then
            echo "❌ Base version ${{ inputs.base_version }} not found!"
            exit 1
          fi
          echo "✅ Base version exists"

      - name: Calculate new version
        id: version
        run: |
          BASE_VERSION="${{ inputs.base_version }}"
          PROMOTION_TYPE="${{ inputs.promotion_type }}"

          # Remove 'v' prefix for semver calculation
          BASE_NO_V="${BASE_VERSION#v}"

          if [ "$PROMOTION_TYPE" = "beta-to-rc" ]; then
            # Validate it's a beta version
            if [[ ! "$BASE_VERSION" =~ -beta\. ]]; then
              echo "❌ Source version must be a beta version for beta-to-rc promotion"
              exit 1
            fi
            NEW_VERSION="v$(semver -i prerelease --preid rc $BASE_NO_V)"
            echo "next_prerelease=rc" >> $GITHUB_OUTPUT
          elif [ "$PROMOTION_TYPE" = "rc-to-stable" ]; then
            # Validate it's an rc version
            if [[ ! "$BASE_VERSION" =~ -rc\. ]]; then
              echo "❌ Source version must be an rc version for rc-to-stable promotion"
              exit 1
            fi
            NEW_VERSION="v$(semver -i patch $BASE_NO_V)"
            echo "next_prerelease=" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid promotion type"
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "✅ New version will be: $NEW_VERSION"

          # Check if new version already exists
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "❌ Version $NEW_VERSION already exists!"
            exit 1
          fi

      - name: Find previous version for comparison
        id: previous
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          NEXT_PRERELEASE="${{ steps.version.outputs.next_prerelease }}"

          if [ -n "$NEXT_PRERELEASE" ]; then
            # Find latest rc or beta
            PREVIOUS=$(git tag --sort=version:refname --list "v*-${NEXT_PRERELEASE}.*" | tail -1)
          else
            # Find latest stable
            PREVIOUS=$(git tag --list --sort=version:refname "v*" | awk '!/-.+$/ {print}' | tail -1)
          fi

          if [ -z "$PREVIOUS" ]; then
            echo "⚠️  No previous version found, using oldest commit from base"
            PREVIOUS=$(git rev-list --max-parents=0 "${{ inputs.base_version }}" | tail -1)
          fi

          echo "version=$PREVIOUS" >> $GITHUB_OUTPUT
          echo "✅ Previous version for comparison: $PREVIOUS"

      - name: Generate changelog
        id: changelog
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Generating changelog..."
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          PREVIOUS_VERSION="${{ steps.previous.outputs.version }}"
          BASE_VERSION="${{ inputs.base_version }}"

          CHANGELOG=$(npx --yes @grandvisionhq/release-tools@latest changelog "$NEW_VERSION" \
            --no-header \
            --source-version "$PREVIOUS_VERSION" \
            --target-ref "$BASE_VERSION" 2>&1)

          if [ -z "$CHANGELOG" ]; then
            echo "❌ Failed to generate changelog"
            exit 1
          fi

          echo "$CHANGELOG" > /tmp/changelog.md
          echo "✅ Changelog generated successfully"

      - name: Get base commit SHA
        id: commit
        run: |
          BASE_SHA=$(git rev-parse "${{ inputs.base_version }}")
          echo "sha=$BASE_SHA" >> $GITHUB_OUTPUT
          echo "✅ Base commit: $BASE_SHA"

      - name: Create promoted release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          NEXT_PRERELEASE="${{ steps.version.outputs.next_prerelease }}"

          echo "Creating DRAFT promoted release $NEW_VERSION..."

          RELEASE_ARGS=(
            "$NEW_VERSION"
            "--title" "$NEW_VERSION"
            "--target" "${{ steps.commit.outputs.sha }}"
            "--notes-file" "/tmp/changelog.md"
            "--draft"
          )

          # Add prerelease flag if promoting to rc
          if [ -n "$NEXT_PRERELEASE" ]; then
            RELEASE_ARGS+=("--prerelease")
          fi

          gh release create "${RELEASE_ARGS[@]}"

          echo "✅ Draft release created successfully!"
          echo "🔗 View release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/$NEW_VERSION"

      - name: Summary
        if: always()
        run: |
          echo "## 🎯 Release Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Promotion Type:** ${{ inputs.promotion_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Version:** ${{ inputs.base_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version (for comparison):** ${{ steps.previous.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Commit:** ${{ steps.commit.outputs.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** 📝 Draft Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "🔗 [View Draft Release](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the changelog and verify the promotion is correct" >> $GITHUB_STEP_SUMMARY
            echo "2. Publish the draft release when ready" >> $GITHUB_STEP_SUMMARY
          fi
